generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String          @id @default(cuid())
    email              String          @unique
    name               String?
    passwordHash       String
    mustChangePassword Boolean         @default(true)
    role               Role            @default(USER)
    emailVerified      DateTime?
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    accounts           Account[]
    sessions           Session[]
    profiles           Profile[]
    payments           Payment[]
    subscriptionsOwned Subscription[]  @relation("UserOwnedSubscriptions")
    statementItems     StatementItem[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Service {
    id            String         @id @default(cuid())
    name          String         @unique
    monthlyCost   Decimal        @db.Decimal(10, 2)
    maxProfiles   Int
    isActive      Boolean        @default(true)
    subscriptions Subscription[]
}

model Subscription {
    id         String      @id @default(cuid())
    serviceId  String
    ownerId    String
    startDate  DateTime
    endDate    DateTime?
    isActive   Boolean     @default(true)
    profiles   Profile[]
    statements Statement[]
    service    Service     @relation(fields: [serviceId], references: [id])
    owner      User        @relation("UserOwnedSubscriptions", fields: [ownerId], references: [id])
}

model Profile {
    id             String       @id @default(cuid())
    subscriptionId String
    userId         String
    isActive       Boolean      @default(true)
    startedAt      DateTime     @default(now())
    endedAt        DateTime?
    subscription   Subscription @relation(fields: [subscriptionId], references: [id])
    user           User         @relation(fields: [userId], references: [id])

    @@unique([subscriptionId, userId])
}

model Payment {
    id        String   @id @default(cuid())
    userId    String
    amount    Decimal  @db.Decimal(10, 2)
    paidAt    DateTime @default(now())
    method    String
    notes     String?
    receiptId String?  @unique
    user      User     @relation(fields: [userId], references: [id])
}

model Statement {
    id             String          @id @default(cuid())
    month          Int
    year           Int
    subscriptionId String
    generatedAt    DateTime        @default(now())
    items          StatementItem[]
    subscription   Subscription    @relation(fields: [subscriptionId], references: [id])

    @@unique([month, year, subscriptionId])
}

model StatementItem {
    id          String     @id @default(cuid())
    statementId String
    userId      String
    amountDue   Decimal    @db.Decimal(10, 2)
    status      ItemStatus @default(PENDING)
    statement   Statement  @relation(fields: [statementId], references: [id])
    user        User       @relation(fields: [userId], references: [id])

    @@unique([statementId, userId])
}

enum ItemStatus {
    PENDING
    PAID
    CREDIT
}

enum Role {
    ADMIN
    USER
}
